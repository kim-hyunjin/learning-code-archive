소프트웨어를 설계하는 방법은
소프트웨어를 설계하는 것은 쉽지 않은 일이고 여기에는 옳거나 틀린 방법은 없다고 생각합니다. 저는 제 경력에서 몇 가지 소프트웨어 디자인 방법을 시도해 보았지만 어떤 것 하나 완벽하지 않았고, 만족스러운 시스템을 구축했다는 자신감을 줄 수는 없었습니다.

제가 일단 코드부터 작성하여 소프트웨어를 프로토타입으로 만드는 코드 퍼스트 접근 방식을 시도해봤는데, 나중에 그 코드를 보면 언제나 헷갈렸습니다. 시스템에 대한 질문들에 자신있게 답할 수가 없었고 종종 놓치는 것들이 많았습니다.

저는 시스템을 그려보는 다이어그램 우선 접근 방식도 시도해보았습니다. 제가 시도해 본 대부분의 다이어그램은 세부 사항에 너무 집중해서 보면 헷갈리는 경우가 많았거나, 너무 고수준이어서 마케팅 브로셔처럼 느껴졌습니다.

저는 다이어그램이 유용하지 않다고 말하는 것은 아니지만, 다른 문서들 없이 그 자체만으로는 충분히 강력하지 않다고 생각합니다. 예를 들어, Elon이 트위터 아키텍처 다이어그램을 공유했을 때, 저는 고수준 컴포넌트를 볼 수 있었지만, 트위터에 대한 깊은 기술적 내용이나 해당 컴포넌트의 실제 의미가 묘사되어 있지는 않았습니다.

Elon이 공유한 트위터 아키텍처 다이어그램

물론 PowerPoint를 이용한 설계도 시연도 시도해 보았는데, 시스템을 보여주는 핵심포인트가 표현된 몇 장의 슬라이드를 제시하는 방식이었습니다. 아무래도 슬라이드에는 빠지는 것들이 있기 마련이고 그래서 답하기 어려운 질문들이 남게 되었습니다.

여러 접근 방식을 실험한 후에, 저는 디자인을 써 내려가는 것이 가장 효과적이었다는 것을 발견했습니다. 물론 이것은 새로운 방법은 아니지만 Seth Godin이 잘 말했듯이 소프트웨어를 설계하는 최고의 방법은 모든 사양을 글로 작성하는 것입니다.

저는 여기에서 여러분들에게 그 과정을 공유하고 싶었고 마지막에는 그 한계에 대해서도 이야기하고 싶었습니다.

이것이 제가 소프트웨어 설계를 진행하는 방법입니다.



글쓰기
효과적으로 글을 쓰기 위해서는 그것이 언론 기사나 설계 문서 또는 시를 쓰는 거라고 해도 주의를 흩뜨릴 수 있는 요소들을 없애는 것이 가장 좋다고 생각합니다. 저는 2-3시간 동안 간섭받지 않는 시간을 만듭니다. 회의나 이메일, 그리고 알림도 없어야 합니다. 저는 잡동사니 없는 노트 앱을 사용합니다. 윈도우에서는 Write-Monkey를, Mac에서는 Focus를 주로 사용했지만 요즘은 VIM을 사용하기도 합니다. 저는 풀 스크린 다크 모드로 작업을 진행합니다. 이렇게 하면 나와 내가 타자 친 것만 남습니다.

다음 섹션에서는 프로젝트에 관심 있는 각각의 이해 관계자 유형별로 디자인 문서 컬렉션을 작성할 것 입니다. 이 문서들 중 일부는 고수준의 내용이며, 일부는 기술적인 내용입니다. 대상 독자는 달라질 수 있습니다.

워크플로우
아마도 가장 중요한 디자인 문서로, 사용 사례가 없는 기능인데 그냥 제 마음에 들어서 소프트웨어에 추가했던 기능들 때문에 제가 이해관계자들에게 불려간 적이 얼마나 많은지 모르겠습니다. 이런 것은 취미 프로젝트는에서 좋을 수 있지만, 상업용 소프트웨어를 구축할 때에는 실용적으로 접근해야 합니다.

워크플로우와 사용 사례를 갖는 것은 업무 범위를 최소화하고 작업에 집중하는 데 도움이 됩니다. 소프트웨어의 거의 모든 부분은 결국 특정 워크플로우나 필요에 기반한 고객 요구 사항과 연결됩니다.

저는 먼저 소프트웨어가 어떻게 사용될지에 대한 세부적인 작성을 시작합니다. 아무것도 빠뜨리지 않도록 합니다. 당연한 사실을 명시적으로 언급하면 아이디어와 창의력이 자유롭게 돌아다니는 마법이 펼쳐집니다. 이 단계에서는 프로젝트의 이해관계자들에게 물어볼 많은 질문들이 나옵니다.

저는 워크플로우 단계에서 나온 질문들을 모아 이해관계자들과 회의를 갖고 최종적인 워크플로우에 대해 판단을 받습니다. 워크플로우의 일부는 애자일에서 미니십(Min-ship)이라고 하는 형태로 전환됩니다. 최종 워크플로우는 프로젝트에 관심 있는 기술 미보유자들에게도 공개됩니다. 워크플로우는 고객 요구 사항을 충족시키고 있습니까?

워크플로우 문서에는 특정한 구조가 없으며, 그저 문서일 뿐입니다. 소프트웨어가 어떻게 사용될지 명확히 나타내는 것이 목표이니, 자유롭게 창의적으로 작성해 주세요. UI 요소를 포함하여 높은 수준도 이야기하고, 이 문서를 읽는 사람들이 소프트웨어가 무엇인지, 누구를 위한 것인지 알 수 있도록 설명해 주세요.

디자인 개요
다음 단계는 새 페이지를 열고 설계 개요를 작성하는 것입니다. 설계 개요는 사용자가 소프트웨어와 상호작용하는 방법과 실제로 어떤 일이 일어나는지를 설명합니다. 이는 워크플로우의 기술적 표현이며, 이 단계에서는 기술 용어를 자유롭게 사용할 수 있습니다.

설계 개요에는 소프트웨어의 다양한 구성 요소, UII, UX, 프론트엔드, 백엔드, 프로토콜, 데이터베이스 등에 대한 설명이 포함됩니다. 또한 각 구성 요소가 상호작용하는 방법과 워크플로우 문서를 참조하는 내용도 포함됩니다. 예를 들어, 워크플로우 문서에서 이 사용 사례를 해결하기 위해 클라이언트로부터 많은 요청이 예상되므로 HTTP/2를 사용해야 한다고 언급될 수 있습니다. 이 문서에는 아직 다이어그램이 없습니다.

설계 개요에 적혔지만 예를 들어 비동기 작업이나 직접적인 사용자 입력이 없는 건강 점검과 같은 항목들은 워크플로우로 연결되지 않을 수도 있습니다. 어떤 사람들은 이것을 비기능적 요구사항이라고 부를 수도 있습니다.

또한 설계 개요는 저에게 생각하지 못한 것들을 명확히 할 수 있게 도와줍니다. 여기서 여러 가지들이 모습을 갖추기 시작하는데, 무슨 데이터베이스가 필요한지, 어떤 역방향 프록시를 사용해야 할지, 백엔드는 어떻게 확장될 것인지, 성급한 접근과 게으른 접근 중 어떤 것이 더 나은지 등을 고려합니다. 나중에 어떤 기술적 문제를 대처해야할지 등 제가 언급하지 않은 부분은 없다. , 어떤 기술적 문제가 발생할 수도 있는 모든 것을 여기에 포함시킵니다.

설계 개요 문서는 기술관련 이해 관련자들에게 검토를 위해 전송됩니다. 이는 거의 RFC(Request for Comments, 검토내용 요청)과 동일한 역할을 합니다.

구성 요소 디자인
문서를 작성하는 동안 구성 요소들이 형성되기 시작합니다. 이러한 구성 요소들은 필요한 경우 각각의 자신의 문서를 가질 것이고 저는 세부사항에 대해 자세히 설명할 수 있습니다.

각 구성 요소마다 새 페이지를 여세요. 그리고 해당 구성 요소가 무엇인지, 어떤 인터페이스와 연결되는지, 어떤 계산을 수행하는지, 어떤 출력물을 내보내는지 등을 자세하게 기록하는 것입니다. 이 구성요소를 읽으면 마치 실제 소스 코드를 읽는 것처럼, 내가 생각할 수 있는 모든 세세한 점을 기록합니다. 제한 사항, 보안 고려사항 등 모든 기술적인 내용을 자세히 다룰 수 있습니다.

일부 프로젝트에서는 이 문서가 의미 없다고 생각했습니다. 왜냐하면 디자인 개요에서 구성 요소를 완전하게 설명할 수도 있기 때문입니다. 하지만 시간이 흐르면 흐를수록 구성요소 문서를 작성하는 경우가 더 늘어났습니다. 어떤 구성 요소들은 너무 커져서 그 자체로도 하나의 프로젝트가 될 수도 있습니다.

설계 개요 다이어그램
모든 구성 요소를 작성한 후에 마지막에는 설계 개요 다이어그램을 그리는 것입니다. 이 다이어그램은 모든 구성 요소가 서로 통신하는 방식을 보여줍니다. 여기서는 어떤 특별한 소프트웨어를 사용하지 않고, 단순히 블록과 사각형, 화살표와 텍스트를 사용합니다. 간단하게 구성하면 됩니다. Google 슬라이드도 완벽합니다.

시스템의 복잡도에 따라 각 구성 요소마다 여러 개의 다이어그램이 있을 수 있습니다. 또한 팀 구성원과 일정간격으로 검토를 받도록 합니다.

이 방식의 제한 사항들
이 접근 방식의 한계 중 하나는 문서를 작성하고 최신 상태로 유지하는 데 걸리는 시간입니다. 때로는 버그를 수정하거나 기능을 도입하는 동안 문서를 최신 상태로 유지하는 것을 잊어버리기도 합니다. 당신이 프로젝트를 떠나게 되면 소유권이 정말 중요해지는데 문서가 스스로 업데이트 되는 일은 없고, 다음 소프트웨어 디자이너는 다른 접근 방식을 선호할 수도 있습니다.

다른 제한 사항으로 참가자들이 문서를 읽지 않거나 프로젝트에 익숙하지 않을 때 이를 회의에서 제시하기 어렵다는 것입니다. 그래서 이럴 때 저는 워크플로우과 디자인 개요로부터 슬라이드 몇 개를 만들어 유용하게 써왔습니다. 하지만 이 모든 문서와 슬라이드를 최신 상태로 유지하는 것이 또 다른 도전이 됩니다.

무엇이든 무료로 얻을 수 있는 것은 없습니다. 여러분은 소프트웨어를 설계할 때 어떻게 하시는지 궁금합니다. 보여주셨으면 좋겠습니다.

요약
이 글에서는 소프트웨어 설계에 대한 나의 접근 방식으로 여러 문서를 작성하는 것을 이야기했습니다. 이는 시간이 많이 소요되는 작업이지만, 이러한 문서들을 다시 참고하면 항상 답을 얻을 수 있습니다.

이 접근 방식이 완벽하다고 주장하는 것은 아니지만 (제한 사항에 대해 이야기했습니다), 모든 내용이 언급되어 있는 이런 문서들을 다시 찾아서 보게 되면 안도감을 느끼게 됩니다.